#include "Rainbow.h"
#include "DS1307RTC.h"
#include <avr/pgmspace.h>

#define COLOR_OFFSET_GREEN 0
#define COLOR_OFFSET_RED (96 / 3)
#define COLOR_OFFSET_BLUE (96 / 3) * 2

#define COL_HOUR   0
#define COL_MINUTE 3
#define COL_SECOND 6

#define BRIGHTNESS 0x1

unsigned char buffer[2][96] = {
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    },
    {
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    }
};

unsigned char whichbuf = 1;
unsigned char bufpos = 0;

void setup() {
    init_rainbow(buffer[0]);
    Serial.begin(9600);
}

void swap_buf() {
    set_next_buffer(buffer[whichbuf]);
    whichbuf ^= 1;
}

const int color_offset[8] = {
    COLOR_OFFSET_GREEN,
    COLOR_OFFSET_GREEN,
    0, // NOT USED
    COLOR_OFFSET_RED,
    COLOR_OFFSET_RED,
    0, // NOT USED
    COLOR_OFFSET_BLUE,
    COLOR_OFFSET_BLUE
};

void set_pixel(int col, int row, bool val) {
    // Convert 8x8 to binary size
    char curr = buffer[0][color_offset[col] + 4*row + (col/2)];
    char newval = 0;

    if (col % 2 == 0) {
        newval = (curr & 0x0F) + (val*BRIGHTNESS << 4);
    } else {
        newval = (curr & 0xF0) + val*BRIGHTNESS;
    }

    buffer[0][color_offset[col] + 4*row + (col/2)] = newval;
}

void set_time(int col, int val) {
    // Set time
    unsigned char nextbuf = whichbuf ^ 1;
    char digit[2] = {0, 0};
    digit[0] = val / 10;
    digit[1] = val % 10;

    set_pixel(col, 7, (digit[0] & (1 << 0)) != 0);
    set_pixel(col, 6, (digit[0] & (1 << 1)) != 0);
    set_pixel(col, 5, (digit[0] & (1 << 2)) != 0);
    set_pixel(col, 4, (digit[0] & (1 << 3)) != 0);

    set_pixel(col + 1, 7, (digit[1] & (1 << 0)) != 0);
    set_pixel(col + 1, 6, (digit[1] & (1 << 1)) != 0);
    set_pixel(col + 1, 5, (digit[1] & (1 << 2)) != 0);
    set_pixel(col + 1, 4, (digit[1] & (1 << 3)) != 0);
}

void loop() {
    tmElements_t tm;
    RTC.read(tm);

    set_time(COL_HOUR, tm.Hour);
    set_time(COL_MINUTE, tm.Minute);
    set_time(COL_SECOND, tm.Second);
}

ISR(TIMER2_OVF_vect) {
    timer2_isr();
}
